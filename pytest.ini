[tool:pytest]
# Pytest Configuration for IoT Predictive Maintenance System

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 6.0

# Test output
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --durations=10
    --color=yes
    --cov=src
    --cov-report=html:reports/coverage
    --cov-report=term-missing
    --cov-report=xml:reports/coverage.xml
    --junitxml=reports/junit.xml

# Markers
markers =
    integration: Integration tests that test multiple components together
    slow: Tests that take more than 5 seconds to run
    ui: Tests that involve UI interaction
    unit: Unit tests that test individual components
    performance: Performance and load tests
    dashboard: Dashboard-specific tests
    training: Training pipeline tests
    anomaly: Anomaly detection tests
    forecasting: Forecasting tests
    config: Configuration management tests
    import_test: Tests for import safety and hanging issues
    core: Core functionality tests
    ml: Machine learning pipeline tests
    data: Data processing and validation tests
    session1: Session 1 foundation tests
    session2: Session 2 tests
    session3: Session 3 tests
    session4: Session 4 tests
    session5: Session 5 tests
    session6: Session 6 tests
    session7: Session 7 tests
    e2e: End-to-end workflow tests

# Filtering
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Coverage options
[coverage:run]
source = src
omit =
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */venv/*
    */env/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod